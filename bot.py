# -*- coding: utf-8 -*-
"""
Telegram posts bot
Version: 0.2
Python: 3.10
OS: Manjaro Linux (6.6.19-1-MANJARO)
Designed for @muqesq by MrWoon
"""
import re
import json
import random

from modules.logger import Logger

import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    ChatMemberUpdated
from aiogram.filters import Command, ChatMemberUpdatedFilter, KICKED
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
logger = Logger("Bot", "logs.txt")
logger.log('info', "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π..")
db = {}
stats24 = '0:0'
codes = []
dp = Dispatcher()
admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"),
            KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"),
            KeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç"),
            KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"),
        ],
        [
            KeyboardButton(text="üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É"),
            KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"),
            KeyboardButton(text="üåê –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫"),
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        ]
    ]
)
stop_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
        ]
    ]
)


# FSM
class AddPost(StatesGroup):
    name = State()
    picture = State()
    button1 = State()
    button2 = State()
    content = State()


class RemovePost(StatesGroup):
    name = State()
    confirm = State()
    post = State()


class SendPost(StatesGroup):
    name = State()
    users = State()
    preview = State()


class PreviewPost(StatesGroup):
    name = State()


class AddLink(StatesGroup):
    link = State()


class DeleteLink(StatesGroup):
    link = State()


# –§—É–Ω–∫—Ü–∏–∏
def update_db(file_path: str, mode: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :type file_path: str
    :param mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ ('w' –¥–ª—è –∑–∞–ø–∏—Å–∏, 'r' –¥–ª—è —á—Ç–µ–Ω–∏—è).
    :type mode: str
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏ False –ø—Ä–∏ –æ—à–∏–±–∫–∏.
    :rtype: bool
    """
    global db
    if mode == 'w':
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(db, f, indent=4)
            return True
    elif mode == 'r':
        with open(file_path, 'r', encoding='utf-8') as f:
            db = json.load(f)
            return True
    else:
        return False


async def clear_stats():
    global stats24
    while True:
        await asyncio.sleep(24 * 3600)
        stats24 = 0


update_db('db.json', 'r')
bot = Bot(db['settings']['token'], default=DefaultBotProperties(parse_mode='HTML'))

logger.log('info', '–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥..')


async def send_post(post: dict, chat_id: int) -> bool:
    '''
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ —á–∞—Ç

    :param post: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞
    :param chat_id: –ê–π–¥–∏ —á–∞—Ç–∞
    :return: True –ø—Ä–∏ —É—Å–µ–ø–µ—Ö–µ –∏ False –ø—Ä–∏ –æ—à–∏–±–∫–∏
    '''

    if db['settings']['DEBUG_MODE'] == 1:
        logger.log('warn', f"send_post({str(post)}, {str(chat_id)})")

    buttons = []
    if post['button1'] is not None:
        buttons.append([InlineKeyboardButton(text=post['button1'][0], url=post['button1'][1])])
    if post['button2'] is not None:
        buttons.append([InlineKeyboardButton(text=post['button2'][0], url=post['button2'][1])])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    try:
        await bot.send_photo(chat_id=chat_id, photo=post['picture'], caption=post['content'], reply_markup=kb)
        return True
    except:
        return False


@dp.message(Command('start'))
async def start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    global stats24

    auth = False
    code = message.text.split(' ')[-1]
    if code in db['codes']:
        auth = True
    else:
        auth = False
    if db['settings']['DEBUG_MODE'] == 1:
        logger.log('warn', f'start() –æ—Ç @{message.from_user.username}')
    if message.from_user.id not in [user["id"] for user in db['users']]:
        if auth:
            db['users'].append({"name": message.from_user.username, "id": message.from_user.id})
            update_db('db.json', 'w')
            try:
                post_indices = random.sample(range(len(db['posts'])), int(db['settings']['random_posts'] + 1))
                for post_index in post_indices:
                    await send_post(db['posts'][post_index], message.chat.id)
            except:
                pass

            if db['settings']['DEBUG_MODE'] == 1:
                logger.log('warn', f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}')

            with open("stats.txt", 'r', encoding='utf-8') as f2:
                stat = f2.read().split(':')
                with open("stats.txt", 'w', encoding='utf-8') as f:
                    f.write(str(int(stat[0]) + 1) + f':{stat[1]}')
            stats24 = str(int(stats24.split(':')[0]) + 1) + f":{stats24[1]}"
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø–æ—Å—Ç—ã!")
        else:
            await message.answer(
                f"–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å—Å—ã–ª–∫—É —É @{db['settings']['admin']}")
    else:
        await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø–æ—Å—Ç—ã.")
        if db['settings']['DEBUG_MODE'] == 1:
            logger.log('warn', f'–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: @{message.from_user.username}')

    if message.from_user.username == db['settings']['admin']:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{db['settings']['admin']}!", reply_markup=admin_kb)
        logger.log('warn', f'–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω: @{message.from_user.username}')


@dp.message(F.text.casefold().in_(['/add_post', "üìù —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"]))
async def add_post(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_post
    """
    if message.from_user.username == db['settings']['admin']:
        await state.set_state(AddPost.name)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞ (–¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)", reply_markup=stop_kb)


# –î–ü–í–ö –¥–ª—è /add_post
@dp.message(AddPost.name)
async def post_name(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    await state.update_data(name=message.text)
    await state.set_state(AddPost.picture)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ—Å—Ç–∞ (–ï—Å–ª–∏ –≤—ã —Å –ü–ö - –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å —Å–∂–∞—Ç–∏–µ–º, –≤—Ç–æ—Ä—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º)", reply_markup=stop_kb)


@dp.message(AddPost.picture, F.photo)
async def post_photo(message: Message, state: FSMContext):
    try:
        if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
            return 0
    except:
        pass
    await state.update_data(picture=message.photo[-1].file_id)
    await state.set_state(AddPost.content)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞", reply_markup=stop_kb)

@dp.message(AddPost.picture, F.text)
async def post_photo_non_pic(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.")


@dp.message(AddPost.content)
async def post_content(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    await state.update_data(content=message.text)
    await state.set_state(AddPost.button1)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¢–µ–∫—Å—Ç + –°—Å—ã–ª–∫–∞' (–ª–∏–±–æ 'none', –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞)",
        reply_markup=stop_kb)


@dp.message(AddPost.button1)
async def post_button1(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    if not re.match(r'^[^|]+? \+ (https?://\S+)$', message.text.strip()) and message.text.strip().lower() != "none":
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–æ–ø–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–¢–µ–∫—Å—Ç + –°—Å—ã–ª–∫–∞' (—Å https://) –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
            reply_markup=stop_kb)
    else:
        await state.update_data(button1=message.text)
        await state.set_state(AddPost.button2)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¢–µ–∫—Å—Ç + –°—Å—ã–ª–∫–∞' (–ª–∏–±–æ 'none', –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞)",
            reply_markup=stop_kb)


@dp.message(AddPost.button2)
async def post_button2(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    if not re.match(r'^[^|]+? \+ (https?://\S+)$', message.text.strip()) and message.text.strip().lower() != "none":
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–Ω–æ–ø–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–¢–µ–∫—Å—Ç + –°—Å—ã–ª–∫–∞' (—Å https://) –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ "
            "–ø–æ–ø—ã—Ç–∫—É.", reply_markup=stop_kb)
    else:
        await state.update_data(button2=message.text)
        data = await state.get_data()
        await state.clear()

        if data['button1'].lower() == "none":
            data["button1"] = None
        else:
            data['button1'] = data['button1'].split(' + ')

        if data['button2'].lower() == "none":
            data["button2"] = None
        else:
            data['button2'] = data['button2'].split(' + ')

        db['posts'].append(data)
        update_db('db.json', 'w')
        await message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=admin_kb)


@dp.message(F.text.casefold().in_(['/remove_post', "üóëÔ∏è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"]))
async def remove_post(message: Message, state: FSMContext):
    '''
    –û–±—Ä–∞—Ç–æ—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /remove_post
    '''
    if message.from_user.username == db['settings']['admin']:
        await state.set_state(RemovePost.name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=stop_kb)


# –î–ü–í–ö –¥–ª—è /remove_post
@dp.message(RemovePost.name)
async def remove_post_name(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    await state.update_data(name=message.text)
    await state.set_state(RemovePost.confirm)
    data = await state.get_data()
    gpost = {}
    for post in db["posts"]:
        if data['name'].lower() in post['name'].lower():
            update_db('db.json', 'r')
            gpost = post
    if gpost != {}:
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–î–∞'),
                    KeyboardButton(text='–ù–µ—Ç')
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç? –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:", reply_markup=kb)
        await state.update_data(post=gpost)
        await send_post(gpost, message.chat.id)
    else:
        await message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_kb)


@dp.message(RemovePost.confirm)
async def remove_post_confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    if message.text == "–î–∞":
        db['posts'] = [post for post in db['posts'] if post["name"].lower() != data['name'].lower()]
        update_db('db.json', 'w')
        await message.answer("<s>–≠—Ç–æ—Ç –ø–æ—Å—Ç –±—ã–ª –∏–∑ —Ç–µ—Ö.. –ö—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª—é–±–∏—Ç –∂–∏—Ç—å..</s>\n–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
                             reply_markup=admin_kb)
    else:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)


@dp.message(F.text.casefold().in_(['/send_post', "‚úâÔ∏è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç"]))
async def send_post_cmd(message: Message, state: FSMContext):
    if message.from_user.username == db['settings']['admin']:
        await state.set_state(SendPost.users)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=stop_kb)


# –î–ü–í–ö –¥–ª—è /send_post
@dp.message(SendPost.users)
async def send_post_users(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    await state.update_data(name=message.text)
    await state.set_state(SendPost.name)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º'),
                KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç? (–ù–∞–ø–∏—à–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –±–µ–∑ @ (–ü—Ä–∏–º–µ—Ä: bob,sonya,vasya). –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º\".)",
        reply_markup=kb)


@dp.message(SendPost.name)
async def send_post_name(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    await state.update_data(users=message.text)
    await state.set_state(SendPost.preview)
    data = await state.get_data()
    gpost = {}
    for post in db["posts"]:
        if data['name'].lower() in post['name'].lower():
            gpost = post
    if gpost != {}:
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text='–î–∞'),
                    KeyboardButton(text='–ù–µ—Ç')
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç? –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:", reply_markup=kb)
        await state.update_data(preview=gpost)
        await send_post(gpost, message.chat.id)
    else:
        await message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_kb)


@dp.message(SendPost.preview)
async def send_post_preview(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    if message.text == "–î–∞":
        if data['users'].lower() == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º":
            update_db('db.json', 'r')
            for chat_id in [user["id"] for user in db['users']]:
                print(chat_id)
                await send_post(data['preview'], chat_id)
        else:
            users = data['users'].split(',')
            for user in users:
                for user2 in db['users']:
                    if user2["name"] == user:
                        await send_post(data['preview'], user2['id'])
        await message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=admin_kb)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_kb)


@dp.message(F.text.casefold().in_(['/posts_list', "üìã —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"]))
async def post_list_cmd(message: Message):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /posts_list
    '''
    if message.from_user.username == db['settings']['admin']:
        p = 1
        for post in db['posts']:
            await message.answer(f'''–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞: {str(p)}
–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: {post['name']}''')
            p += 1
        if db['posts'] == []:
            await message.answer("–í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
        else:
            await message.answer("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª—é–±–æ–≥–æ –ø–æ—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ /preview", reply_markup=admin_kb)


@dp.message(F.text.casefold().in_(['/preview']))
async def preview_cmd(message: Message, state: FSMContext):
    if message.from_user.username == db['settings']['admin']:
        await state.set_state(PreviewPost.name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å")


@dp.message(PreviewPost.name)
async def preview_post(message: Message, state: FSMContext):
    await state.clear()

    gpost = {}
    for post in db["posts"]:
        if message.text.lower() in post['name'].lower():
            gpost = post
    if gpost != {}:
        await message.answer("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞:")
        await send_post(gpost, message.chat.id)
    else:
        await message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(F.text.casefold().in_(['/add_link', "üîó —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É"]))
async def add_link_cmd(message: Message, state: FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_link
    '''
    await state.set_state(AddLink.link)
    await message.answer(text=f"–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ–¥ –¥–ª—è —Å—Å—ã–ª–∫–∏ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å", reply_markup=stop_kb)


# –î–ü–í–ö –¥–ª—è /add_link
@dp.message(AddLink.link)
async def add_link(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    await state.clear()
    code = message.text.strip()
    if code in db['codes']:
        await message.answer("–°—Å—ã–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        db['codes'].append(code)
        update_db('db.json', 'w')
        username = (await bot.get_me()).username
        link = f"https://t.me/{username}?start={code}"
        await message.answer(text=f"–°—Å—ã–ª–∫–∞: {link}", reply_markup=admin_kb)


@dp.message(F.text.casefold().in_(['/delete_link', "‚ùå —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É"]))
async def delete_link_cmd(message: Message, state: FSMContext):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_link
    '''
    await state.set_state(DeleteLink.link)
    await message.answer(text=f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (—Å https://) –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å", reply_markup=stop_kb)


# –î–ü–í–ö –¥–ª—è /delete_link
@dp.message(DeleteLink.link)
async def delete_link(message: Message, state: FSMContext):
    if message.text.strip().lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_kb)
        return 0
    await state.clear()
    code = message.text.split('?start=')[1].strip()
    if code in db['codes']:
        db['codes'].remove(code)
        update_db('db.json', 'w')
        await message.answer("–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=admin_kb)
    else:
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admin_kb)


@dp.message(F.text.casefold().in_(['/links', "üåê —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫"]))
async def links(message: Message):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /links
    '''
    username = (await bot.get_me()).username
    c = 1
    for code in db['codes']:
        link = f"https://t.me/{username}?start={code}"
        await message.answer(f"–°—Å—ã–ª–∫–∞ {str(c)}: {link}", reply_markup=admin_kb)
        c += 1
    if not db['codes']:
        await message.answer("–í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–µ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞.", reply_markup=admin_kb)


@dp.message(F.text.casefold().in_(['/stats', "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
async def links(message: Message):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    '''
    with open('stats.txt', 'r', encoding='utf-8') as f:
        stats = f.read().strip()
    await message.answer(f'''
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
–ó–∞ 24 —á–∞—Å–∞
- –í—Ö–æ–¥–æ–≤: {stats24.split(':')[0]}
- –í—ã—Ö–æ–¥–æ–≤: {stats24.split(':')[1]}
–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è
- –í—Ö–æ–¥–æ–≤: {stats.split(':')[0]}
- –í—ã—Ö–æ–¥–æ–≤: {stats.split(':')[1]}
''', reply_markup=admin_kb)


logger.log('info', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..')


@dp.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def left_member(event: ChatMemberUpdated):
    global stats24

    with open("stats.txt", 'r', encoding='utf-8') as f2:
        stat = f2.read().split(':')
        with open("stats.txt", 'w', encoding='utf-8') as f:
            f.write(f'{stat[0]}:' + str(int(stat[1]) + 1))
    stats24 = f"{stats24[0]}:" + str(int(stats24.split(':')[1]) + 1)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main() -> None:
    await bot.delete_webhook(drop_pending_updates=True)
    task = asyncio.create_task(clear_stats())
    logger.log('info', '–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
    await dp.start_polling(bot)
    logger.log('critical', '–ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω')


if __name__ == "__main__":
    asyncio.run(main())
    update_db('db.json', 'w')
